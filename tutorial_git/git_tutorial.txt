＃【Git第1回】使う理由・歴史・特徴・インストール
https://harusite.net/20230207-git/


#【Git第2回】サンプルコード作成からローカルリポジトリにコミットするまで
https://harusite.net/20230208-git/


#【Git第3回】Gitの各種コマンドの使い方（変更・削除・gitignore・変更の戻し）
https://harusite.net/20230209-git/


#【Git第4回】GitHub(リモートリポジトリ)とのやり取り
https://harusite.net/20230210-git/


#【Git第5回】ブランチとマージ
https://harusite.net/20230212-git/



## マージ

### マージとは
他の人の変更内容を取り込む作業のこと

# command example
$ git merge <branch-name>
$ git merge <remmote-name/branch-name>
$ git merge origin/tutorial


### 3種類のマージ
Fast Foward : 早送りになるマージ : ブランチが枝分かれしていないとき、ブランチのポインタを前に進める 
Auto Merge  : 基本的なマージ    : 枝分かれして開発している場合、マージコミットという新しいコミットを作る
コンフリクト　：　複数人が同じ箇所を別々に編集　→ GitHubでどちらの変更を優先して良いかわからない状態

### ハンズオン
GitHubで編集　→ ローカルに取り込み（マージ）してみる

GitHubで以下を編集

---
before-

「commit changes」

after-

---

$ git pull origin tutorial
remote: Enumerating objects: 7, done.
remote: Counting objects: 100% (7/7), done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 4 (delta 2), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (4/4), 784 bytes | 196.00 KiB/s, done.
From https://github.com/conti0513/development
 * branch            tutorial   -> FETCH_HEAD
   af80a5b..ab20c6d  tutorial   -> origin/tutorial
Merge made by the 'ort' strategy.
 tutorial_git/index.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)
 ---


yoshi@y0513 tutorial % git log --oneline
ab20c6d (origin/tutorial) Update index.html
af80a5b revise ../tutorial_php/Q25-Q28.php

--

## コンフリクト
複数人が同じ箇所を別々に編集　→ GitHubでどちらの変更を優先して良いかわからない状態

### コンフリクトの解決方法
コンフリクトしたファイルを突き止める
コンフリクトしたファイルの内容を（本来やりたかった記述に）書き換える

## コンフリクトが起きないようにするための工夫
複数人で同じファイルを変更しない
pullやremote push する前に変更中の状態を無くしておく（commitやstashをしておく）
pullするときは該当ブランチに移動してから作業する
コンフリクトしても慌てない

## ブランチの変更・削除

### ブランチの変更
# command
$ git branch -m <branch-name>
$ git branch -m feature

### ブランチの削除
# command
$ git branch -d <branch-name>      # マージされていない変更が残っている場合削除しない
$ git branch -D <new-branch-name>  # 強制削除







# Git X回 エラー対応・コンフリクト解消

<h2>よくわからなくなったので最初の構成に戻す→やりたい構成にしたい
発生事象
個人開発環境でGitを操作しているうちに、よくわからなくなった
git push, git pull, git reset ...色々やっているうちによくわからなくなった
ごみファイルが大量にある
なぜかsubmoduleができた
ローカルのフォルダはそのままにして、Gitをキレイにしたい
やりたい構成にしたい

<h3>やりたかった構成

development(リポジトリ)
|-master(ブランチ／個人開発したツールやWEBサイトの向けに予約)
|-tutorial(ブランチ／各種調査・テスト・学習時のコードはこちら)
  |-tutorial_Powershell
  |-tutorial_php
  |-tutorial_git
  |-tutorial_linux
  |-tutorial_sql
  |-readme.txt(ブランチの概要を記載)
  :
  :

<h3>修正前の構成
development(リポジトリ)
|-master(ブランチ／個人開発したツールやWEBサイトの向けに予約)
  |-index.html
  |-test.html

|-tutorial(ブランチ／各種調査・テスト・学習時のコードはこちら)
  |-tutorial_Powershell
  |-tutorial_php
  |-tutorial_git
  |-tutorial_linux
  |-tutorial_sql
 

<h2>発生したエラー
・なぜかsubmoduleが作成される
・全てのローカルのディレクトリが反映されない
・git diff をすると「-dirty」が発生
・git addすると怒られる「warning: adding embedded git repository:」
・git commit すると怒られる
・git push すると怒られる
・git pull すると怒られる

<h2>対応内容
ローカルのディレクトリのバックアップを作成

---
Local
|-tutorial_bkup
|-turorial
---


ローカルで「.gitignore」ファイルを記載し、Gitで管理しないフォルダやファイルを記載
git rm <fire-name/dir-name>で該当ディレクトリのファイルを削除
消えなければ　手動でrm
ファイルを残したければ、git rm -- cach <fire-name/dir-name>で該当ディレクトリの管理対象からはずす
ファイルをバックアップから戻す

GitHubのページで以下になったことを確認

---
development(リポジトリ)
|-master(ブランチ／個人開発したツールやWEBサイトの向けに予約)
  |-何もなし
|-tutorial(ブランチ／各種調査・テスト・学習時のコードはこちら)
  |-何もなし
---

ローカルのディレクトリに管理したいファイルやディレクトリをバックアップから戻す

===







