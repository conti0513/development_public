########################################
tutorial_linux
########################################
大事なこと
########################################
・完璧を求めない
・全部把握しなくてもざっくりで前に進む
・１周目、２周目はインデックス作りでOK
・その後点と点がつながる（ドットコネクト）する

#############################
ブログ記載用
#############################

# 第1回　Linuxを始める（GCPとDocker上でそれぞれCentOS、Ubuntuを起動）
https://harusite.net/20230226-linux/

# 第2回　【Linux第2回】ディレクトリの操作
https://harusite.net/20230308-linux/

# 第3回　ファイルの操作

## cat
concatenate
コンテンツを表示
40行までのファイルを目処に使用

option
-n ファイルの行番号を表示

一度に複数のファイルを指定することも可能
cat file1 file2

## less
less - opposite of more
コンテンツをスクロール
長いファイルの中身を見たい時に使う（50行以上が目安）

### スクロールの操作
space, f 一画面下にスクロール
b        一画面上にスクロール
j        一行下にスクロール
k        一行上にスクロール
q        lessコマンドを終了

### 検索の操作
/<文字列> 下方向に向かって検索
?<文字列> 上方向に向かって検索
n        次の検索結果に移動
N        前の検索結果に移動
---



## テキストファイル

文字コードで定められた文字だけが並んで格納されているファイル
文字コード：文字をコンピュータで処理したり通信したりするために文字の種類に数字を割り振ったもの
Linuxではテキストファイルは重要
OSに関わるほとんどの設定情報をテキストファイルとして管理しているため


## バイナリファイル
文字コード以外の数値を含むファイル
　ex) 画像ファイル、音声ファイル、実行ファイルなど
テキスト以外のファイルはバイナリファイルと考えてOK
catコマンドでバイナリファイルが文字化けする理由
無理やりテキストファイルとして解釈しようとして
文字コードに該当する部分をその文字に置き換えるため発生する

---

## touch
空のファイルを作成
ファイツ名が存在していない場合：空のファイルを作成
ファイル名が存在している場合：タイムスタンプを更新



## rm
remove
ファイルを削除
注意点：ファイルをrmするとゴミ箱を経由せず、原則戻せないので注意

# option
-r dir # ディレクトリも併せて削除
-f ファイル削除時に警告を表示しない　強制実行
-i ファイル削除前に確認あり
---

## mv
move
ファイルの移動
ファイル名の変更

# option
-i 上書きする前に確認する


## cp
copy
ファイル・ディレクトリをコピー
コピー先のファイルが既にある場合、上書きするので注意

# option
-i 上書きする前に確認する
-r ディレクトリをコピーする


## ln
link
リンクを貼る


### リンクとは？

#### ハードリンク
一つのファイルの実体に複数の名前を付ける方法
もとのファイルを削除しても消えない
全てのハードリンクがなくなったら削除される


#### シンボリックリンク
リンク先のパスが書かれた特殊ファイル
リンク先がファイルの実体
シンボリックリンクを残したままファイルの実体を削除したり、ファイルを移動するとファイルを参照できなくなる
Windowsのショートカットと似ている


### ハンズオン

ln file1 file2     # オプションなし　ハードリンク
ln -s file1 file3  # シンボリックリンク



### リンクの用途
長いパス名を省略したい時
複数バージョンを共存させて最新を区別したい時
シンボリックリンクの方が使用頻度が高い（せいげんがないため）

※ハードリンクの制限
異なるディスクを跨いで作成できない
ディレクトリに対して使えない
---


## find
find
ファイルを検索する

### 書式
find <検索開始ディレクトリ> <検索条件> <アクション>
fing . -name test.txt -print

# option
-name
ファイル名の大文字小文字を区別する
ワイルドカードが使用可能’’ ”” で囲うこと
find . -name '*.html' -print

-iname
ファイル名を指定してファイルを検索
ファイル名の大文字小文字を区別しない


### よく使われる検索条件
-type
-type d : ディレクトリ
find . -type d -print

-type f : 通常ファイル
find . -type f -print

-type l : シンボリックリンク
find . -type l -print


-a
複数の検索条件を指定

find . -type d -a -name images -print
---

## 練習ハンズオン
からファイルを作成
ファイル名を変更
ディレクトリを作成し、配下にファイルを作成
シンボリックリンクを貼る
ファイルを検索する
作成したファイルを削除





#############################
memo
#############################

dockerコンテナ削除

yoshimasa kondo
docker 開発環境　次回に引き継ぎたい
Dockerを使った開発環境を次回に引き継ぐためには、以下のステップを行うことをお勧めします。

Dockerfileを作成する
Dockerfileを作成することで、同じ環境を簡単に再現できます。Dockerfileには、必要なパッケージやアプリケーション、設定などを記述します。Dockerイメージをビルドするために、Dockerfileを使用します。

Dockerイメージをビルドする
Dockerfileを使用して、Dockerイメージをビルドします。ビルドされたイメージは、Docker Hubなどのイメージレジストリにアップロードすることができます。

Dockerコンテナを作成する
ビルドされたDockerイメージから、Dockerコンテナを作成します。コンテナには、必要な環境変数や設定ファイルなどが含まれます。

データを永続化する
開発に必要なデータや設定は、Dockerコンテナ内に保存されます。コンテナを削除すると、すべてのデータが失われます。したがって、データを永続化するために、Dockerボリュームを使用することをお勧めします。

Docker Composeを使用する
複数のコンテナを管理する場合は、Docker Composeを使用することをお勧めします。Docker Composeを使用することで、コンテナの起動、停止、削除などを簡単に行うことができます。また、環境変数やポート番号などを設定することもできます。

ドキュメントを作成する
最後に、開発環境の構築手順や使い方などをまとめたドキュメントを作成することをお勧めします。ドキュメントを作成することで、他の人が開発環境を引き継ぎやすくなります。




## docker ps -a コマンドの結果を全て削除するには、以下のコマンドを実行します。

docker rm $(docker ps -aq)
上記のコマンドで、 docker ps -aq コマンドで全てのコンテナIDを取得し、 docker rm コマンドでそれら全てのコンテナを削除します。

注意点として、このコマンドは実行後に削除されたコンテナは元に戻すことができないため、注意して実行してください。
また、実行中のコンテナは削除できないため、削除したいコンテナがある場合は、
事前に docker stop コマンドでコンテナを停止してから削除するようにしてください。

---


#############################
blog
#############################
#【Linux第1回】Linuxを始める
https://harusite.net/20230226-linux/



#【Linux第2回】ディレクトリの操作
https://harusite.net/20230308-linux/




#############################
memo
#############################



### 絶対パスと相対パス

Linuxにおいて、ファイルやディレクトリのパスを表現するには、絶対パスと相対パスがある

#### 絶対パス
ルートディレクトリ（/）から始まるパスのこと
ファイルやディレクトリを一意に指定することができる

---
ex)
# "/home" はルートディレクトリを表し、それ以下のディレクトリをたどって、"file.txt" を指定している
/home/user/Documents/file.txt

ex)
# ルートディレクトリから "etc" ディレクトリ以下にある "apt" ディレクトリ以下にある "sources.list" ファイルを指定している
/etc/apt/sources.list
---


#### 相対パス
現在のディレクトリを基準にしたパスのこと
ルートディレクトリを指定する必要はない
注意点：相対パスは現在のディレクトリに依存するため、場合によっては実行場所が異なるとパスが解決されないことがある

---
ex)

# 現在のディレクトリが "/home/user" であるとき、"Documents" ディレクトリ以下にある "file.txt" ファイルを指定
Documents/file.txt

# 現在のディレクトリが "/home/user/Documents" であるとき、上位ディレクトリ（親ディレクトリ）の "Desktop" ディレクトリ以下にある "image.jpg" ファイルを指定
../Desktop/image.jpg: 

---

表
.. 親ディレクトリ
.　カレントディレクトリ

ハンズオン
conti@8756cd8eb5e0:~/work$ pwd
/home/conti/work
conti@8756cd8eb5e0:~/work$ cd ../
conti@8756cd8eb5e0:~$ pwd
/home/conti
conti@8756cd8eb5e0:~$ cd ./work 
conti@8756cd8eb5e0:~/work$ pwd
/home/conti/work
conti@8756cd8eb5e0:~/work$ 
---

#### まとめ
パスはディレクトリやファイルの住所情報
ディレクトリの階層の区切りを「/」で表現する
絶対パスはルートディレクトリ（「/」）から始まる
相対パスはカレントディレクトリから始まるパス
「.」はカレントディレクトリを表す
「..」は親ディレクトリを表す
---


### help と　man

#### help
--helpオプションでコマンドヘルプメッセージを表示する

ハンズオン
 cat --help
Usage: cat [OPTION]... [FILE]...
Concatenate FILE(s) to standard output.

With no FILE, or when FILE is -, read standard input.

  -A, --show-all           equivalent to -vET
  -b, --number-nonblank    number nonempty output lines, overrides -n
  -e                       equivalent to -vE
  -E, --show-ends          display $ at end of each line
  -n, --number             number all output lines
  -s, --squeeze-blank      suppress repeated empty output lines
  -t                       equivalent to -vT
  -T, --show-tabs          display TAB characters as ^I
  -u                       (ignored)
  -v, --show-nonprinting   use ^ and M- notation, except for LFD and TAB
      --help     display this help and exit
      --version  output version information and exit

Examples:
  cat f - g  Output f's contents, then standard input, then g's contents.
  cat        Copy standard input to standard output.

GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
Report cat translation bugs to <https://translationproject.org/team/>
Full documentation at: <https://www.gnu.org/software/coreutils/cat>
or available locally via: info '(coreutils) cat invocation'
---


#### man
manual
コマンドのマニュアルを表示する
man <コマンド名>

ハンズオン


# man ls
LS(1)                                                                                                 User Commands                                                                                                 LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.

       Mandatory arguments to long options are mandatory for short options too.
:
:
--
# -k option
# man -k ls
add-shell (8)        - add shells to the list of valid login shells
blockdev (8)         - call block device ioctls from the command line
dircolors (1)        - color setup for ls
false (1)            - do nothing, unsuccessfully
ls (1)               - list directory contents
lsattr (1)           - list file attributes on a Linux second extended file system
lsblk (8)            - list block devices
lscpu (1)            - display information about the CPU architecture
lsipc (1)            - show information on IPC facilities currently employed in the system
lslocks (8)          - list local system locks
lslogins (1)         - display information about known users in the system
lsmem (1)            - list the ranges of available memory with their online status
lsns (8)             - list namespaces
man (1)              - an interface to the system reference manuals
md5sum.textutils (1) - compute and check MD5 message digest
pam_exec (8)         - PAM module which calls an external command
pam_shells (8)       - PAM module to check for valid login shell
remove-shell (8)     - remove shells from the list of valid login shells
watch (1)            - execute a program periodically, showing output fullscreen
---


#### エラー対応

This system has been minimized by removing packages and content that are
not required on a system that users do not log into.

unminimize

ーーー
==========

Bash シェルスクリプトを使いこなすためには、以下のようなステップを踏むと良いでしょう。

Bash の基本的な構文を学ぶ
Bash スクリプトを書くためには、Bash の基本的な構文を理解する必要があります。変数、条件分岐、ループなどの基本的な構文を理解することが重要です。

スクリプトの作成方法を学ぶ
Bash スクリプトを作成するためには、テキストエディタを使ってスクリプトファイルを作成する必要があります。スクリプトファイルの作成方法や、ファイルの保存場所、ファイルの実行方法などを理解する必要があります。

コマンドの実行方法を学ぶ
Bash スクリプトを作成するためには、コマンドの実行方法を理解する必要があります。コマンドを実行する方法や、コマンドの出力を変数に格納する方法、コマンドのオプションを指定する方法などを学ぶことが重要です。

スクリプトのデバッグ方法を学ぶ
Bash スクリプトを作成するときには、必ずバグが発生することがあります。そのため、スクリプトのデバッグ方法を理解することが重要です。デバッグ用のオプションや、スクリプトの実行中にエラーが発生した場合の対処法などを学ぶことが重要です。

サンプルスクリプトを参考にする
Bash スクリプトを作成するときには、サンプルスクリプトを参考にすると良いでしょう。インターネット上には、多くのサンプルスクリプトが存在します。これらのスクリプトを参考にして、自分でスクリプトを作成してみることをお勧めします。

練習する
Bash スクリプトを使いこなすためには、練習が必要です。自分で問題を作成して、それを解決するためのスクリプトを作成するなど、練習を続けることが大切です。また、実際にスクリプトを実行して、動作を確認することも重要です。




yoshimasa kondo
Bash スクリプト　練習問題　Ubuntu

以下は、Ubuntu で Bash スクリプトを練習するためのいくつかの問題です。これらの問題を解くことで、Bash スクリプトの基本的な構文やコマンドの使い方を学ぶことができます。

ユーザーに名前を尋ねて、その名前を含んだメッセージを表示するスクリプトを作成してください。

指定した数値の合計を求めるスクリプトを作成してください。スクリプトは、数値をスペースで区切って入力することができ、合計値を出力する必要があります。

ディレクトリ内のすべてのファイルのリストを表示するスクリプトを作成してください。スクリプトは、ディレクトリを指定して実行することができ、ファイル名を行ごとに表示する必要があります。

指定された数値までの素数を出力するスクリプトを作成してください。

指定した文字列がファイル名に含まれるファイルをすべて削除するスクリプトを作成してください。

以上の問題は、Bash スクリプトを練習するための基本的な問題です。これらの問題に取り組むことで、Bash スクリプトの基本的な構文やコマンドを理解し、スクリプトの作成能力を向上させることができます。




yoshimasa kondo
あと１５問ください
以下にさらに15問のBashスクリプトの練習問題を示します。これらの問題を解くことで、より高度なスクリプトの作成能力を向上させることができます。

カレントディレクトリ内のすべてのサブディレクトリにあるテキストファイルの行数をカウントするスクリプトを作成してください。

パスワードファイルから、指定されたユーザーの情報を取得するスクリプトを作成してください。

指定したディレクトリ内のサブディレクトリごとに、そのディレクトリ内のファイル数を表示するスクリプトを作成してください。

指定された数値までのフィボナッチ数列を表示するスクリプトを作成してください。

指定した文字列を含む行を持つすべてのテキストファイルを検索するスクリプトを作成してください。

ディレクトリ内のすべての空ファイルを削除するスクリプトを作成してください。

ディレクトリ内のすべてのファイルに対して、指定されたパターンの文字列を検索して表示するスクリプトを作成してください。

テキストファイルから、指定されたパターンの文字列を含む行を検索して、その行を含むファイル名を表示するスクリプトを作成してください。

ディレクトリ内のすべてのファイルに対して、指定された文字列を置換するスクリプトを作成してください。

指定された文字列を含む行を持つすべてのファイルを置換するスクリプトを作成してください。

ディレクトリ内のすべての画像ファイルをリサイズするスクリプトを作成してください。

テキストファイルから、指定された



Stop generati

==========
