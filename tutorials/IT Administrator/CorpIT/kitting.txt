### キッティング

#### WIndows

setup.ps1
# ステップ1: 管理者アカウントとユーザーアカウント作成
function Step1 {
    $adminUser = Read-Host "Enter the administrator username (or type 'exit' to stop)"
    if ($adminUser -eq "exit") {
        Write-Host "Setup aborted at Step 1."
        exit
    }
    $adminPassword = Read-Host -AsSecureString "Enter the administrator password"
    New-LocalUser -Name $adminUser -Password $adminPassword -FullName "Administrator Account"
    Add-LocalGroupMember -Group "Administrators" -Member $adminUser

    $userUser = Read-Host "Enter the standard user username (or type 'exit' to stop)"
    if ($userUser -eq "exit") {
        Write-Host "Setup aborted at Step 1."
        exit
    }
    $userPassword = Read-Host -AsSecureString "Enter the standard user password"
    New-LocalUser -Name $userUser -Password $userPassword -FullName "Standard User Account"
    Add-LocalGroupMember -Group "Users" -Member $userUser
}

# ステップ2: Chocolateyのインストールとアプリのインストール
function Step2 {
    $continue = Read-Host "Proceed with installing Chocolatey and applications? (yes/exit)"
    if ($continue -eq "exit") {
        Write-Host "Setup aborted at Step 2."
        exit
    }
    
    # Chocolateyのインストール
    Set-ExecutionPolicy Bypass -Scope Process -Force
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    # アプリケーションのインストール
    choco install googlechrome -y
    choco install zoom -y
}

# ステップ3: インストーラー形式のアプリのインストール
function Step3 {
    $continue = Read-Host "Proceed with installing app1.exe? (yes/exit)"
    if ($continue -eq "exit") {
        Write-Host "Setup aborted at Step 3."
        exit
    }
    
    Start-Process "C:\Scripts\setup\app1.exe" -ArgumentList "/silent" -Wait
    Start-Process "C:\Scripts\setup\app2.exe" -ArgumentList "/silent" -Wait
}

# ステップ4: システム設定（タイムゾーン、言語）
function Step4 {
    $continue = Read-Host "Proceed with system settings? (yes/exit)"
    if ($continue -eq "exit") {
        Write-Host "Setup aborted at Step 4."
        exit
    }
    
    Set-TimeZone -Id "Tokyo Standard Time"
    Set-WinUILanguageOverride -Language "ja-JP"
    Set-WinDefaultInputMethodOverride -InputTip "0411:00000411"
}

# スクリプト実行
Write-Host "Starting setup..."

Step1
Step2
Step3
Step4

Write-Host "Setup completed successfully."



---
### **README: Windows 初期セットアップ用 PowerShell スクリプト**

#### 1. 概要
このフォルダには、Windows PCの初期セットアップを効率化するためのスクリプトと必要なアプリケーションのインストーラーファイルが含まれています。スクリプトは、管理者権限での実行が必要です。

---

#### 2. Chocolateyについて
**Chocolatey**は、Windowsのパッケージ管理ツールです。アプリケーションのインストール、更新、アンインストールをコマンドラインで自動化でき、複数のPCに対するアプリケーションの展開や管理が効率化されます。

##### Chocolateyの主な利点：
- **アプリケーションの一括インストール**。
- **自動アップデート**機能により、アプリケーションの最新バージョン管理を簡単に行える。
- **豊富なリポジトリ**から、様々なアプリをインストール可能。

##### Chocolatey利用例：
以下のコマンドでGoogle ChromeやZoomをインストールします：
```powershell
choco install googlechrome -y
choco install zoom -y
```

---

#### 3. スクリプトの実行手順
1. **管理者権限でPowerShellを起動**します。
2. `setup.ps1`を次のコマンドで実行します：
   ```powershell
   .\setup.ps1
   ```

##### スクリプト実行の流れ：
- **ステップ1**: 管理者アカウントと標準ユーザーアカウントの作成（対話形式）
- **ステップ2**: Chocolateyを使ったアプリケーション（Google Chrome、Zoom）のインストール
- **ステップ3**: インストーラー形式のアプリ（app1.exe, app2.exe）のインストール
- **ステップ4**: システム設定（タイムゾーン、言語設定）

**各ステップで中断**したい場合は、`exit`と入力してスクリプトを終了できます。

---

#### 4. システム設定内容
- **タイムゾーン**: 日本標準時（Tokyo）
- **システム言語**: 日本語（ja-JP）
- **キーボード設定**: 日本語キーボード (0411:00000411)

---

#### 5. 注意事項
- インターネット接続が必要です（Chocolateyのインストールに必要）。
- スクリプトは中断後、再実行時には最初から実行されます。
- フォルダ内のインストーラー（app1.exe, app2.exe）は、適切なパスに配置されている必要があります。

---

### **setupフォルダ構成**
```
/setup
   ├── setup.ps1         # PowerShellスクリプト
   ├── README.txt        # 実行手順や仕様説明
   ├── app1.exe          # インストーラー形式アプリケーション1
   ├── app2.exe          # インストーラー形式アプリケーション2
```

---

#### Mac
各アプリの基本的なインストールオプションを定義し、Homebrewまたはローカルインストーラー（.dmg/.pkg）を使用してアプリケーションをインストールします。以下に各部分を説明します。

macOSスクリプトの内容
bash
コードをコピーする
#!/bin/bash

# 各アプリの基本インストールオプションを定義 (アプリ名 => オプション)
declare -A installOptions=(
    ["Google Chrome"]="--cask"
    ["Microsoft Edge"]="--cask"
    ["IceCube"]=""  # IceCube の実際のオプションを追加可能
    ["Malion Cloud"]=""  # Malion Cloud の実際のオプションを追加可能
)

# インストーラーが保存されるフォルダ（または brew がアプリのインストールを行う場所）
installerFolder="/Applications"

# アプリをインストールするための関数
function install_app() {
    local appName=$1
    local options=$2

    if [ "${installOptions[$appName]+_}" ]; then
        echo "オプション: $options で $appName をインストールしています..."
        if [[ "$options" == "--cask" ]]; then
            # brew cask を使ってアプリをインストール
            brew install $appName $options
        else
            # brew 以外のインストール（dmgやpkgファイルを想定）
            echo "提供されたインストーラーを使って $appName を手動でインストールしてください。"
            echo "インストーラーは $installerFolder にある必要があります。"
            # .dmg ファイルをマウントしてインストール（必要な場合）
            dmgFile="$installerFolder/$appName.dmg"
            if [ -f "$dmgFile" ]; then
                echo "$dmgFile から $appName をマウントしてインストール中"
                hdiutil attach "$dmgFile"
                # .app または .pkg ファイルがDMG内にあると仮定
                sudo cp -R /Volumes/"$appName"/*.app /Applications/
                hdiutil detach /Volumes/"$appName"
            else
                echo "$dmgFile が見つかりません。インストーラーをダウンロードしてください。"
            fi
        fi
    else
        echo "$appName のインストールオプションが見つかりませんでした。"
    fi
}

# Google Chrome のインストール
install_app "google-chrome" "${installOptions["Google Chrome"]}"

# Microsoft Edge のインストール
install_app "microsoft-edge" "${installOptions["Microsoft Edge"]}"

# IceCube のインストール（ローカルインストーラーが必要）
install_app "IceCube" "${installOptions["IceCube"]}"

# Malion Cloud のインストール（ローカルインストーラーが必要）
install_app "Malion Cloud" "${installOptions["Malion Cloud"]}"

# 必要に応じて、他のアプリケーションをここに追加可能
各部分の説明
1. Homebrewを使ったパッケージ管理
brew を使ってアプリケーションを簡単にインストールします。
Google ChromeやMicrosoft Edgeなどはbrew caskを使用し、サイレントインストールが可能です。
2. インストーラーの保存場所
installerFolderに指定したディレクトリ（デフォルトでは/Applications）に、手動インストール用の.dmgや.pkgファイルがあることを想定しています。
スクリプトは.dmgファイルをマウントしてアプリをコピーし、完了後にアンマウントします。
3. インストール関数
install_app 関数は辞書（installOptions）で定義されたインストールオプションを参照してインストールを行います。
brewがサポートするアプリの場合、brewコマンドでインストールします。
それ以外の場合は、手動でインストーラーを使ってインストールすることを前提にしています（.dmgや.pkgファイルを使ってインストール）。
4. 柔軟性
各アプリのインストールオプションはinstallOptionsで定義されており、簡単に変更や追加が可能です。
より複雑なオプションが必要な場合は、辞書に追加して対応できます。
----





