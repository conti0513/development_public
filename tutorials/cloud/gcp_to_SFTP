### **GCS → Cloud Functions → SFTP 転送（壁打ちメモ）**  

#### **✅ 要件**
- **GCS に CSV をアップロードすると、自動で SFTP に転送**
- **イベントドリブン（Cloud Functions）**
- **最小構成でテスト**
- **SFTP サーバーは既に起動済み**
- **GCP の `--set-env-vars` を使用して環境変数を管理**
- **本番は Secret Manager に移行する可能性あり**

---





#### **✅ 作業ステップ**
1. **GCS に CSV をアップロード**  
   - バケット作成（`my-test-bucket`）  
   - テスト用 CSV をアップ  

2. **Cloud Functions を作成**  
   - **トリガー:** GCS のファイルアップロード  
   - **ランタイム:** Python 3.9  
   - **環境変数（`--set-env-vars`）で SFTP 接続情報を管理**  

3. **SFTP 転送コードを実装**  
   - `paramiko` を使用  
   - 環境変数から SFTP 情報を取得  
   - GCS から CSV を取得し、SFTP に転送  

4. **Cloud Functions をデプロイ**  
   - `requirements.txt` に `paramiko` を追加  
   - `--set-env-vars` で SFTP 接続情報を設定  
   - デプロイコマンド：
     ```bash
     gcloud functions deploy gcs_to_sftp \
       --runtime python39 \
       --trigger-resource my-test-bucket \
       --trigger-event google.storage.object.finalize \
       --set-env-vars SFTP_HOST="192.168.1.100",SFTP_PORT="22",SFTP_USER="sftpuser",SFTP_PASSWORD="P@ssw0rd!"
     ```

5. **テスト & ログ確認**  
   - GCS に CSV をアップロード  
   - Cloud Functions のログを確認  
   - SFTP にファイルが転送されているかチェック  

---

#### **✅ 注意点**
- **`--set-env-vars` はデプロイ時にしか設定できない**（変更時は再デプロイ）  
- **本番環境では Secret Manager を推奨**  
- **Cloud Functions は短時間実行のため、長時間処理は適さない**  
- **SFTP の認証方式（パスワード or 鍵認証）は今後検討**  

---

### **✅ まとめ**
- **まず `--set-env-vars` でテスト → 動作確認後に Secret Manager へ移行**
- **SFTP 転送が成功すれば OK**
- **不具合があれば Cloud Functions のログをチェック**
- **GCS → Cloud Functions → SFTP 転送の流れを最小構成で実装**

---
### **GCS → Cloud Functions → SFTP 転送（コード集）**  
### **✅ パスワード認証 & 鍵認証の両方に対応する汎用コード**
🔹 **環境変数で「パスワード認証 or 鍵認証」を切り替え可能**  
🔹 **どちらの認証方式か不明でも、そのまま動作する**  
🔹 **パスワードが `None` の場合、鍵認証を使用する**  

---

### **1️⃣ `main.py`（汎用版 SFTP 転送）**
```python
import os
import paramiko
from google.cloud import storage, secretmanager

# 環境変数から SFTP 接続情報を取得
SFTP_HOST = os.getenv("SFTP_HOST")
SFTP_PORT = int(os.getenv("SFTP_PORT", 22))
SFTP_USER = os.getenv("SFTP_USER")
SFTP_PASSWORD = os.getenv("SFTP_PASSWORD")  # Noneなら鍵認証
SFTP_PRIVATE_KEY_PATH = os.getenv("SFTP_PRIVATE_KEY_PATH")  # Noneならパスワード認証
SFTP_REMOTE_PATH = os.getenv("SFTP_REMOTE_PATH", "/upload/")

# Secret Manager から秘密鍵を取得（必要な場合）
def get_secret(secret_id):
    client = secretmanager.SecretManagerServiceClient()
    name = f"projects/<PROJECT_ID>/secrets/{secret_id}/versions/latest"
    return client.access_secret_version(name=name).payload.data.decode("UTF-8")

if SFTP_PRIVATE_KEY_PATH and SFTP_PRIVATE_KEY_PATH.startswith("projects/"):
    SFTP_PRIVATE_KEY = get_secret(SFTP_PRIVATE_KEY_PATH)
else:
    SFTP_PRIVATE_KEY = None

def upload_to_sftp(file_name, file_content):
    """SFTP に CSV を転送（パスワード or 鍵認証）"""
    transport = paramiko.Transport((SFTP_HOST, SFTP_PORT))

    if SFTP_PASSWORD:  # パスワード認証
        transport.connect(username=SFTP_USER, password=SFTP_PASSWORD)
    elif SFTP_PRIVATE_KEY:  # Secret Manager から取得した鍵
        pkey = paramiko.RSAKey.from_private_key(SFTP_PRIVATE_KEY)
        transport.connect(username=SFTP_USER, pkey=pkey)
    elif SFTP_PRIVATE_KEY_PATH:  # ローカルの鍵ファイルを使用
        pkey = paramiko.RSAKey.from_private_key_file(SFTP_PRIVATE_KEY_PATH)
        transport.connect(username=SFTP_USER, pkey=pkey)
    else:
        raise ValueError("SFTP の認証情報が不足しています")

    sftp = paramiko.SFTPClient.from_transport(transport)

    remote_file = f"{SFTP_REMOTE_PATH}/{file_name}"
    with sftp.file(remote_file, 'w') as f:
        f.write(file_content)

    sftp.close()
    transport.close()

def gcs_to_sftp(event, context):
    """GCS の新規 CSV ファイルを SFTP に転送"""
    bucket_name = event['bucket']
    file_name = event['name']

    if not file_name.endswith(".csv"):
        print(f"Skipping non-CSV file: {file_name}")
        return

    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(file_name)

    file_content = blob.download_as_text()
    upload_to_sftp(file_name, file_content)
    print(f"Uploaded {file_name} to SFTP successfully")
```

---

### **2️⃣ `requirements.txt`（ライブラリ）**
```txt
google-cloud-storage
google-cloud-secret-manager
paramiko
```

---

### **3️⃣ Cloud Functions のデプロイ**
```bash
gcloud functions deploy gcs_to_sftp \
  --runtime python39 \
  --trigger-resource my-bucket \
  --trigger-event google.storage.object.finalize \
  --set-env-vars SFTP_HOST="192.168.1.100",SFTP_PORT="22",SFTP_USER="sftpuser",SFTP_PASSWORD="",SFTP_PRIVATE_KEY_PATH="projects/<PROJECT_ID>/secrets/SFTP_PRIVATE_KEY",SFTP_REMOTE_PATH="/upload/"
```

🔹 **パスワード認証の場合:** `SFTP_PASSWORD="P@ssw0rd!"` を設定  
🔹 **鍵認証の場合:** `SFTP_PRIVATE_KEY_PATH="projects/<PROJECT_ID>/secrets/SFTP_PRIVATE_KEY"` に設定  

---

### **✅ まとめ**
✔ **環境変数だけで「パスワード or 鍵認証」を切り替え可能**  
✔ **パスワードが設定されていればパスワード認証、なければ鍵認証を使用**  
✔ **Secret Manager で鍵 (`id_rsa`) を安全に管理可能**  
✔ **どちらの認証方式かわからなくても、このコードで対応OK！**

💡 **これで、本番でもテストでも柔軟に対応できる！** 🚀