# How The Web Works > HTTP in detail
  - Index
    - # What is HTTP(S)?
    - # Requests And Responses
    - # HTTP Methods
    - # HTTP Status Codes
    - # Headers
    - Cookies
    - Making Requests


## What is HTTP(S)?
  - HTTP (HyperText Transfer Protocol): The protocol used to communicate with web servers and transmit webpage data (HTML, images, videos, etc.), developed by Tim Berners-Lee in 1989-1991.

  - HTTPS (HyperText Transfer Protocol Secure): The secure version of HTTP, where data is encrypted to prevent eavesdropping and verify that you're communicating with the correct server.

  - Key Questions:
  What does HTTP stand for? : HyperText Transfer Protocol
  
  - What does the "S" in HTTPS stand for? : Secure
  ---

## Requests And Responses

  - What is a URL? (Uniform Resource Locator)
    - A URL is an instruction for accessing resources on the internet. It includes:
      - **Scheme**: The protocol (e.g., HTTP, HTTPS). 
      - **User**: Optional login credentials.
      - **Host**: Domain name or IP address.
      - **Port**: The connection port (e.g., 80 for HTTP, 443 for HTTPS).
      - **Path**: The location of the resource.
      - **Query String**: Extra data sent to the resource (e.g., `/blog?id=1`).
      - **Fragment**: Refers to a specific part of the page.

  - Making a Request
    - A typical **HTTP request** example:
  
  ```bash
  GET / HTTP/1.1
  Host: tryhackme.com
  User-Agent: Mozilla/5.0 Firefox/87.0
  Referer: https://tryhackme.com/
  ```
    - **GET / HTTP/1.1**: Requests the homepage using HTTP version 1.1.
    - **Host**: The website (e.g., tryhackme.com).
    - **User-Agent**: Browser info (e.g., Firefox version 87).
    - **Referer**: The webpage that referred you (e.g., https://tryhackme.com).
    - Requests always end with a blank line to signal completion.

  - Example Response

```bash
HTTP/1.1 200 OK
Server: nginx/1.15.8
Date: Fri, 09 Apr 2021 13:34:03 GMT
Content-Type: text/html
Content-Length: 98
<html>...</html>
```
    - **HTTP/1.1 200 OK**: The server's protocol and status code (200 = success).
    - **Server**: Tells the client the web server software (e.g., nginx).
    - **Date**: The current date and time on the server.
    - **Content-Type**: The type of data being sent (e.g., HTML).
    - **Content-Length**: How much data is in the response.
    - A blank line confirms the end of the response.

  - **Key Questions**:
    - What HTTP protocol is being used? **HTTP/1.1**
    - What response header tells the browser how much data to expect? **Content-Length**
---


## HTTP Methods
  - Common HTTP Methods:
    - GET: Used to retrieve information from a web server.
    - POST: Used to submit data and create new records on a web server.
    - PUT: Used to update existing information on a web server.
    - DELETE: Used to remove information or records from a web server.

  - Key Questions:
    - What method is used to create a new user account? POST
    - What method is used to update your email address? PUT
    - What method is used to delete a picture? DELETE
    - What method is used to view a news article? GET
---

## HTTP Status Codes
  - HTTP Status Codes Overview:
    - 100-199: Information Response – The request has been accepted; the client should continue sending data.    - 200-299: Success – The request was successfully completed.
    - 300-399: Redirection – The client is redirected to a different resource or webpage.
    - 400-499: Client Errors – There was an issue with the client’s request.
    - 500-599: Server Errors – There was a problem on the server-side.

  - Common HTTP Status Codes:
    - 200 OK: The request was completed successfully.
    - 201 Created: A new resource (like a user or blog post) was created.
    - 301 Moved Permanently: The resource has been moved to a new location permanently.
    - 302 Found: Temporary redirection.
    - 400 Bad Request: The client’s request was malformed or missing required information.
    - 401 Not Authorized: Authentication is required to view the resource.
    - 403 Forbidden: You do not have permission to access the resource.
    - 404 Page Not Found: The resource does not exist.
    - 405 Method Not Allowed: The requested method is not supported.
    - 500 Internal Service Error: The server encountered an error it couldn’t handle.
    - 503 Service Unavailable: The server is overloaded or under maintenance.

  - Key Questions:
    - 201: Response code for creating a new user or blog post.
    - 404: Response code for a page that doesn't exist.
    - 503: Response code when the server is overloaded or under maintenance.
    - 401: Response code when trying to edit a profile without logging in.
---


## Headers

  - What are Headers?
    Headers are extra pieces of information sent with HTTP requests and responses, helping clients and servers communicate more effectively.

  - Common Request Headers (Sent from client to server):
    - Host: Specifies which website the server should respond with.
    - User-Agent: Identifies the browser and version, helping format the website properly.
    - Content-Length: Tells the server how much data is being sent (e.g., form data).
    - Accept-Encoding: Tells the server what compression methods the browser supports.
    - Cookie: Sends stored information to the server to remember the user.

  - Common Response Headers (Sent from server to client):
    - Set-Cookie: Stores information on the client for future requests.
    - Cache-Control: Informs how long to store content in the browser's cache.
    - Content-Type: Specifies the type of data being returned (e.g., HTML, images).
    - Content-Encoding: Indicates the compression method used to send the data.

  - Key Questions:
    - What header tells the web server what browser is being used?:User-Agent
    - What header tells the browser what type of data is being returned?:Content-Type
    - What header tells the web server which website is being requested?:Host
---

## Cookies
  - A cookie is a small piece of data stored on your computer by a web server. Cookies allow websites to remember your information between requests, helping with user recognition, session management, and personalization.

  - Key Concepts:
    - Session Cookies: Temporary cookies that are deleted when the browser is closed.
    - Persistent Cookies: Stored for a specific duration, even after closing the browser.
    - Secure Cookies: Only transmitted over HTTPS connections, ensuring secure communication.
    - HttpOnly Cookies: Cannot be accessed via JavaScript, providing protection from XSS attacks.
    - SameSite Cookies: Restricts how cookies are sent with requests to other sites, reducing CSRF risks.
    - Third-Party Cookies: Created by domains other than the one you're visiting, often for tracking users across different websites.
    
  - Additional Key Concepts:
    - Set-Cookie Header: The header used by the server to save cookies on the user's computer.
    - Cookie Expiration: Defines how long a cookie will persist (session vs. persistent).
    - Authentication: Cookies often store session tokens to keep users logged in.
    - Privacy Concerns: Cookies, especially third-party ones, can track users across sites, leading to privacy issues.


  - Cookie usage from a security perspective:
    - Enhanced Privacy Protection: Third-party cookies used for user tracking are increasingly viewed as privacy violations.

    - Stricter Browser Restrictions: Major browsers like Chrome and Firefox are moving toward blocking third-party cookies, with changes such as making the SameSite attribute default.

    - GDPR and CCPA Enforcement: Data protection regulations in Europe and the US require compliance with cookie usage, leading to stricter control over their use.

    - Emergence of Cookie Alternatives: Technologies like FLoC (Federated Learning of Cohorts) are being tested as alternatives to user tracking without using cookies.

    -Protection Against XSS and CSRF Attacks: To prevent cookies from being stolen via JavaScript, security measures like HttpOnly and SameSite attributes are gaining importance.

    - Necessity of Secure Communication: Cookies transmitted over non-HTTPS connections are at risk of being intercepted, making secure cookies recommended.

    - User Consent Requirements: Website operators are increasingly required to obtain explicit consent from users for cookie usage (e.g., through Cookie Consent pop-ups).


---

