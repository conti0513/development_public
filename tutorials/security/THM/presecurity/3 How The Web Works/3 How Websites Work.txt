### How The Web Works > How Websites Work
  - Index
    - # DNS in detail
    - # HTTP in detail
    - How Websites Work
    - Putting it all together

### How The Web Works

# How Websites work
  - How Websites Work - Summary:
    When you visit a website, your browser (like Chrome or Safari) sends a request to a web server. The server responds with data, which your browser then uses to display the website.

  - Components of a Website:
    - Front End (Client-Side): The part of the website your browser renders and displays.
    - Back End (Server-Side): The server that processes the browser's request and sends back a response.

  - Key Question:
    What term best describes the component of a web application rendered by your browser? : Front End
---


# HTML
  - HTML - Summary:
    Websites are built using three main technologies:

    - HTML: Defines the structure of the website.
    - CSS: Styles the website (e.g., colors, fonts).
    - JavaScript: Adds interactivity to the website.
    
  - Key HTML Components:
    - DOCTYPE: Declares the document as an HTML5 page for standardization across browsers.
    - <html>: The root element of the webpage.
    - <head>: Contains metadata about the page (e.g., the page title).
    - <body>: Holds the visible content of the page.
    - <h1>: Defines a heading.
    - <p>: Defines a paragraph.
    
  - HTML Attributes:
    - class: Used for styling multiple elements with the same class name (e.g., <p class="bold-text">).
    - id: Uniquely identifies an element on the page (e.g., <p id="example">).
    - src: Specifies the source of an image (e.g., <img src="img/cat.jpg">).
---


# Java Script
  - JavaScript (JS) Summary:
    JavaScript is a widely used programming language that makes web pages interactive. While HTML creates the structure and content of a website, JavaScript controls its functionality, allowing dynamic updates and user interactions.

  - Key Features:
    - Interactivity: JavaScript adds dynamic elements, like buttons or animations, that can respond to user actions (e.g., clicks or hovers).
    
    - Real-Time Updates: JS can modify HTML content in real time without reloading the page, making web pages more responsive and interactive.
  
  - How JavaScript is Used:
    In-Line or External: JavaScript can be written directly in HTML with <script> tags or included from external files using the src attribute.

    - Example: <script src="/path/to/javascript_file.js"></script>
    DOM Manipulation: JS can interact with HTML elements by their IDs to change content, styling, or behavior.

    - Example: document.getElementById("demo").innerHTML = "TEST";
    Event Handling: HTML elements can trigger JS code when events occur (e.g., "onclick" or "onhover").

    - Example: <button onclick='document.getElementById("demo").innerHTML = "Button Clicked";'>Click !!</button>
---


# Sensitive Data Exposure
- Sensitive Data Exposure in Source Code:

  - Definition: Sensitive data exposure occurs when sensitive information (e.g., login credentials or hidden links) is not properly removed or protected in a websiteâ€™s source code.

  - Common Causes:
    Developers forget to remove sensitive information from HTML or JavaScript.
    Exposed temporary login credentials or hidden links are left in the source code.
    
  - Risks:
    Attackers can leverage this information to gain unauthorized access to other parts of the application.
    Sensitive data can be used to access backend components or escalate attacks.
    
  - Security Tip:
    One of the first steps in assessing a web application for vulnerabilities is reviewing the page source code to check for exposed credentials or links.

  - dev mode (mac os)
  command + option + i
---



# HTML Injection
  - Summary of HTML Injection:
    - HTML Injection: A vulnerability that occurs when user input is not properly sanitized, allowing an attacker to inject HTML or JavaScript into a webpage.

    - Cause: When a website fails to filter or sanitize user input, the user can insert malicious code that gets executed or displayed on the page.

    - Importance of Input Sanitization: Ensures that user input is safe and does not contain harmful content. Input sanitization is crucial for both frontend and backend functionality.

    - How It Works: If a form or input field allows HTML or JavaScript, the attacker can control how the page looks or behaves by submitting malicious code.

    - Example: A form that outputs text directly to the page can allow a user to insert HTML tags, which are then rendered as part of the page content.

    - Prevention: Always sanitize user input by removing or escaping HTML tags or other potentially dangerous elements before displaying or using the input in the application.

  - Key Rule:
    Never trust user input. Developers should ensure proper sanitization of all user-submitted data to prevent vulnerabilities like HTML injection.
---

