##### GAS Cheat Sheet

Here’s the **whole polished version** of your **GAS Cheat Sheet** with added explanations:

---

### **How to Open Google Apps Script**
1. Go to **Google Drive**.
2. Click on **New > More > Google Apps Script**.
3. Write your code.
4. Save it.
5. Press the **Run** button.

---

### **Logger vs. Console in GAS**

In Google Apps Script, use `Logger.log()` instead of `console.log()` due to the following reasons:

1. **Google Apps Script Environment**:
   - **No browser console**: Google Apps Script runs in a server-side environment (cloud), not in a browser, so there's no access to the typical browser console.
   - **Logger.log()**: This method is used to log information and debug messages, viewable in the **Logs** section of the Apps Script editor.

2. **Viewing Logs**:
   - After running your script, go to **"View" > "Logs"** in the Apps Script editor to view the output of `Logger.log()`.

3. **Use of `console.log()`**:
   - `console.log()` works only in client-side JavaScript (such as HTML in web apps), but **not** in server-side Google Apps Script.

**Summary**:
- Use **`Logger.log()`** for server-side GAS logging.
- Use **`console.log()`** in client-side JavaScript (if building web apps).

---

### **1. Arithmetic Operations**
```javascript
function gasCheatSheet() {
  var sum = 5 + 3;     // Addition
  var diff = 5 - 3;    // Subtraction
  var prod = 5 * 3;    // Multiplication
  var div = 5 / 3;     // Division
  var mod = 5 % 3;     // Modulus (Remainder)
  Logger.log(sum, diff, prod, div, mod);
}
```
**Explanation**: This function demonstrates basic arithmetic operations:
- **Addition** (`+`), **Subtraction** (`-`), **Multiplication** (`*`), **Division** (`/`), and **Modulus** (`%`) to find the remainder.

---

### **2. Variables**
```javascript
function gasVariables() {
  var x = 10;          // var (function-scoped)
  let y = 20;          // let (block-scoped)
  const z = 30;        // const (block-scoped, cannot be reassigned)
  Logger.log(x, y, z);
}
```
**Explanation**: Demonstrates the three main ways to declare variables in JavaScript:
- **`var`**: Function-scoped, older style.
- **`let`**: Block-scoped, recommended for most variable declarations.
- **`const`**: Block-scoped, cannot be reassigned once initialized.

---

### **3. Data Types**
```javascript
function dataTypes() {
  var num = 42;                // Number
  var str = "Hello Gas!!";      // String
  var bool = true;              // Boolean
  var arr = [1, 2, 3];          // Array
  var obj = { name: "John" };   // Object
  var und = undefined;          // Undefined
  var nul = null;               // Null

  Logger.log("Number:", num);
  Logger.log("String:", str);
  Logger.log("Boolean:", bool);
  Logger.log("Array:", arr);
  Logger.log("Object:", obj);
  Logger.log("Undefined:", und);
  Logger.log("Null:", nul);
}
```
**Explanation**: Shows the main data types in JavaScript:
- **Number**, **String**, **Boolean**, **Array**, **Object**, **Undefined**, and **Null**. Each is logged for clarity.

---

### **4. Objects**
```javascript
function learnObjects() {
  var person = {
    name: "Alice",
    age: 30,
    greet: function() {
      Logger.log("Hello, " + this.name);  // Logs a greeting using the object's name property
    }
  };
  
  Logger.log("Person's Name: " + person.name);
  Logger.log("Person's Age: " + person.age);

  person.greet();
}
```
**Explanation**: This function demonstrates how to create and use an object in JavaScript:
- An object (`person`) with properties (`name`, `age`) and a method (`greet`).
- Methods can use `this` to refer to the object's properties.

---

### **5. Arrays**
```javascript
function learnArrays() {
  var arr = [10, 20, 30];

  var first = arr[0];
  var second = arr[1]; 
  var third = arr[2];
  
  Logger.log("First element: " + first);
  Logger.log("Second element: " + second);
  Logger.log("Third element: " + third);

  arr.push(40);    // Add element (40)
  Logger.log("Array after push: " + arr);

  arr.pop();       // Remove last element
  Logger.log("Array after pop: " + arr);

  var length = arr.length;  // Get length of array
  Logger.log("Array length: " + length);
}
```
**Explanation**: Demonstrates how to create and manipulate arrays:
- Accessing elements by index, adding (`push`) and removing (`pop`) elements, and checking the array's length.

---

### **6. Loops**
```javascript
function learnLoops() {
  var arr = [10, 20, 30];
  
  // For loop
  for (var i = 0; i < arr.length; i++) {
    Logger.log("Element at index " + i + ": " + arr[i]);
  }

  // While loop
  var count = 0;
  while (count < arr.length) {
    Logger.log("Element at count " + count + ": " + arr[count]);
    count++;
  }
}
```
**Key Difference**:
- **For loop**: Best when the number of iterations is known.
- **While loop**: Best when the condition determines how long to loop, and the number of iterations is unknown.

---

### **7. Functions**
```javascript
var result;

function addNumbers(a, b) {
  return a + b;
}

function useFunction() {
  Logger.log("useFunction started");
  
  result = addNumbers(6, 12);  // Store result in the global variable
  Logger.log("Sum is: " + result);
}

function accessSum() {
  Logger.log("accessSum started");
  
  useFunction();  // Call useFunction
  Logger.log("Accessed Sum is: " + result);  // Check the global result variable
}
```

**Explanation**:
- **`addNumbers(a, b)`**: Takes two arguments, `a` and `b`, and returns their sum.
- **`useFunction()`**: Logs a message, calls `addNumbers(6, 12)`, stores the result in the global variable `result`, and logs the sum.
- **`accessSum()`**: Logs a message, calls `useFunction()`, and logs the value of the global variable `result`.

---

### **8. Conditional Statements**
```javascript
function checkValue(x) {
  if (x > 10) {
    Logger.log(x + " is greater than 10");
  } else if (x === 10) {
    Logger.log(x + " is equal to 10");
  } else {
    Logger.log(x + " is less than 10");
  }
}

function testConditional() {
  checkValue(15);
  checkValue(10);
  checkValue(5);
}
```

---

### **9. Built-in Objects**
```javascript
function useBuiltInObjects() {
  var date = new Date();              // Date object
  Logger.log("Current Date: " + date);

  var mathResult = Math.sqrt(16);     // Math object
  Logger.log("Square root of 16: " + mathResult);

  var jsonObj = { name: "Alice", age: 30 };
  var jsonString = JSON.stringify(jsonObj);  // JSON object
  Logger.log("JSON String: " + jsonString);

  var parsedObj = JSON.parse(jsonString);
  Logger.log("Parsed Object Name: " + parsedObj.name);
}
```

**Explanation**:
- **Date Object**: `new Date()` creates a new object with the current date and time. Logs the date.
- **Math Object**: `Math.sqrt(16)` calculates the square root of 16. Logs the result.
- **JSON Object**:
  - `JSON.stringify(jsonObj)`: Converts a JavaScript object into a JSON string.
  - `JSON.parse(jsonString)`: Converts a JSON string back into an object.

---

This final **GAS Cheat Sheet** now has explanations for all the key sections (1-9). The cheat sheet is now more comprehensive, yet concise and easy to understand for anyone using Google Apps Script. Let me know if you’d like any further refinements!

Here’s a cheat sheet for **Google Apps Script (GAS)**, focusing on essential syntax and functions for quick reference:

### **1. Basics**
- **Create Function**:
  ```javascript
  function myFunction() {
    // code here
  }
  ```

- **Log output**:
  ```javascript
  Logger.log('This is a log message');
  ```

- **Comments**:
  ```javascript
  // Single line comment
  /* Multi-line comment */
  ```

### **2. Spreadsheet Functions**
- **Get Active Spreadsheet**:
  ```javascript
  var sheet = SpreadsheetApp.getActiveSpreadsheet();
  ```

- **Get Specific Sheet**:
  ```javascript
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Sheet1');
  ```

- **Get Cell Value**:
  ```javascript
  var value = sheet.getRange('A1').getValue();
  ```

- **Set Cell Value**:
  ```javascript
  sheet.getRange('A1').setValue('New Value');
  ```

- **Get Last Row/Column**:
  ```javascript
  var lastRow = sheet.getLastRow();
  var lastColumn = sheet.getLastColumn();
  ```

- **Append a Row**:
  ```javascript
  sheet.appendRow([data1, data2, data3]);
  ```

### **3. Loops & Conditionals**
- **For Loop**:
  ```javascript
  for (var i = 0; i < 10; i++) {
    Logger.log(i);
  }
  ```

- **ForEach Loop (Array)**:
  ```javascript
  var arr = [1, 2, 3];
  arr.forEach(function(item) {
    Logger.log(item);
  });
  ```

- **If Statement**:
  ```javascript
  if (condition) {
    // code
  } else {
    // alternative code
  }
  ```

### **4. Google Drive**
- **Get Files in a Folder**:
  ```javascript
  var folder = DriveApp.getFolderById('folderId');
  var files = folder.getFiles();
  while (files.hasNext()) {
    var file = files.next();
    Logger.log(file.getName());
  }
  ```

- **Create a New Folder**:
  ```javascript
  var folder = DriveApp.createFolder('New Folder');
  ```

### **5. Gmail Functions**
- **Send Email**:
  ```javascript
  MailApp.sendEmail('recipient@example.com', 'Subject', 'Body text');
  ```

- **Get Inbox Threads**:
  ```javascript
  var threads = GmailApp.getInboxThreads(0, 10); // Get first 10 threads
  ```

### **6. Calendar Functions**
- **Create Event**:
  ```javascript
  var calendar = CalendarApp.getDefaultCalendar();
  calendar.createEvent('Meeting', new Date('2024-09-06 10:00:00'), new Date('2024-09-06 11:00:00'));
  ```

### **7. Triggers**
- **Create a Trigger (for Time-Based Events)**:
  ```javascript
  ScriptApp.newTrigger('myFunction')
    .timeBased()
    .everyDays(1) // Trigger daily
    .create();
  ```

- **Delete All Triggers**:
  ```javascript
  var triggers = ScriptApp.getProjectTriggers();
  for (var i = 0; i < triggers.length; i++) {
    ScriptApp.deleteTrigger(triggers[i]);
  }
  ```

### **8. Web App**
- **Deploy Web App**:
  ```javascript
  function doGet() {
    return HtmlService.createHtmlOutput('<h1>Hello World</h1>');
  }
  ```

- **Return JSON Response**:
  ```javascript
  function doGet() {
    var data = { name: 'GAS', type: 'Script' };
    return ContentService.createTextOutput(JSON.stringify(data)).setMimeType(ContentService.MimeType.JSON);
  }
  ```

### **9. Utilities**
- **Pause Script**:
  ```javascript
  Utilities.sleep(1000); // Pauses for 1 second
  ```

- **Date Formatting**:
  ```javascript
  var formattedDate = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'yyyy-MM-dd HH:mm:ss');
  ```

### **10. Error Handling**
- **Try-Catch Block**:
  ```javascript
  try {
    // Code that may throw an error
  } catch (error) {
    Logger.log('Error: ' + error.message);
  }
  ```

---


---