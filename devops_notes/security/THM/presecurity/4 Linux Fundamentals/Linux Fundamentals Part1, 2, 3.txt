### Linux Fundamentals > Linux Findamentals Part1
- Index
  - Linux Findamentals Part1
  - Linux Findamentals Part2
  - Linux Findamentals Part3

#### Linux Findamentals Part1
- Index
  # Task 1 Introduction
  # Task 2 A Bit of Background on Linux
  # Task 3 Interacting With Your First Linux Machine (In-Browser)
  # Task 4 Running Your First few Commands
  # Task 5 Interacting With the Filesystem!
  # Task 6 Searching for Files
  # Task 7 An Introduction to Shell Operators
  # Task 8 Conclusions & Summaries


# Task 1 Introduction

  - Introduction to Linux, another popular operating system like Windows and MacOS.
  
  - Linux powers a wide range of devices including smart cars, Android devices, supercomputers, home appliances, and enterprise servers.
    
  - In this module, you will:
    - Learn about the history of Linux.
    - Run your first commands in an interactive Linux environment.
    - Learn essential commands for interacting with the file system.
    - Discover how to search for files.
    - Get introduced to shell operators.



# Task 2 A Bit of Background on Linux
  - Summary: Where is Linux Used?
    - Linux is widely used in various systems, though it may seem more complex than other OSs like Windows.
    Advantages of Linux:
    - Lightweight and efficient.
    - It's likely that you encounter Linux daily, as it powers:
      - Websites
      - Car entertainment/control panels
      - Point of Sale (PoS) systems
      - Critical infrastructure like traffic light controllers and industrial sensors.
    
    -Flavours of Linux:
      - Linux is a term used for many different OS versions based on UNIX.
      - Open-source nature of Linux allows for many variations suited for different uses.
      - For example:
        - Ubuntu and Debian are common distributions, used for servers or as desktop systems.
        - Ubuntu Server can run with as little as 512MB of RAM.
        - Just like Windows has different versions (7, 8, 10), Linux has many distributions.
    
    - First release of Linux: 1991.

# Task 3 Interacting With Your First Linux Machine (In-Browser)
# Task 4 Running Your First few Commands

  - Summary: Using the Linux Terminal with Example Output
    - Ubuntu's lightweight nature often means that it lacks a GUI (Graphical User Interface) by default.
    Instead, interaction is done via the Terminal, a text-based interface.
    While initially intimidating, familiarity with commands makes terminal usage much easier over time.

  - Basic Terminal Commands with Example Output:
    
    - echo: Outputs any text provided.
    bash
    $ echo Hello, World!
    Hello, World!

    - whoami: Displays the username of the currently logged-in user.
    bash
    $ whoami
    user1
    ---

# Task 5 Interacting With the Filesystem!

  - Commands Overview:
    ls: Lists the contents of the current directory.
    cd: Changes the current directory.
    cat: Outputs the contents of a file.
    pwd: Prints the full path of the current working directory.
    
  - Detailed Breakdown:
    - Listing Files (ls):

    Lists all files and folders in the current directory.
    Example:
    bash
    $ ls
    Important Files  My Documents  Notes  Pictures
    
    
    - Changing Directories (cd):

    Changes your current directory to a specified one.
    Example:
    bash
    $ cd Pictures
    $ ls
    dog_picture1.jpg dog_picture2.jpg
    
    - Outputting File Contents (cat):

    Displays the content of a file.
    Example:
    bash
    $ cat todo.txt
    Here's something important for me to do later!
   
    - Finding the Current Path (pwd):

    Shows the full path of your current working directory.
    Example:
    bash
    $ pwd
    /home/ubuntu/Documents

---

  
# Task 6 Searching for Files
  - Find Command:
    - Efficiently searches for files without navigating directories manually.
    Use find -name [filename] to search for a specific file.
    - Example: find -name passwords.txt finds the file location.
    Use wildcards like *.txt to search for all files with a certain extension.
    
    - Example:
    find -name *.txt finds all .txt files in the current directory.
    Output might show multiple locations for .txt files.
    
  - Grep Command:
    - Searches inside files for specific text or values.
    
    - Example: grep "81.143.211.90" access.log searches a log file for entries containing the specified IP address.
    
    - Efficiency:
    Both find and grep make searching for files and contents quicker and more manageable, especially when dealing with large files or multiple directories.
---


# Task 7 An Introduction to Shell Operators
  - Shell Operators Overview:
    Linux shell operators are useful for enhancing command-line operations.
    Key operators include &, &&, >, and >>.

  - Detailed Breakdown of Operators:
    - &: Runs commands in the background, allowing you to continue working while the command executes in the background (e.g., copying a large file).

    - &&: Combines multiple commands in one line. Command2 will only run if Command1 executes successfully (e.g., command1 && command2).

    - >: Redirects the output of a command to a file, replacing the file's content. For example, echo hey > welcome creates a file named "welcome" with the content "hey". Note: If the file already exists, its content is overwritten.

    - >>: Appends output to a file rather than replacing its contents. For example, echo hello >> welcome adds "hello" to the existing "welcome" file without overwriting its current content.

  - Example Questions:
    - To run a command in the background, use: &
    - To overwrite the contents of a file with "password123", use: echo password123 > passwords
    - To append "tryhackme" to a file while keeping the existing content, use: echo tryhackme >> passwords
  

  - Here's the pronunciation for the key operators:
    - & (ampersand): Pronounced as "and."
    - && (double ampersand): Pronounced as "and and."
    - > (greater than): Pronounced as "redirect" or "greater than."
    - >> (double greater than): Pronounced as "append" or "double redirect."
---

# Task 8 Conclusions & Summaries
  - Conclusions & Summaries:
    You've completed an introduction to Linux and learned the basics.

  - Key topics covered:
    - Why Linux is so popular and widely used today.
    - Interacting with a Linux machine for the first time.
    - Fundamental commands like echo, ls, cd, cat, etc.
    - Navigating the filesystem and using commands like find and grep to locate data efficiently.
    - Shell operators like &, &&, >, and >> to enhance command usage.
---



### Linux Fundamentals Part2
  - Index
    #Task 1 Introduction
    #Task 2 Accessing Your Linux Machine Using SSH (Deploy)
    #Task 3 Introduction to Flags and Switches
    #Task 4 Filesystem Interaction Continued
    #Task 5 Permissions 101
    #Task 6 Common Directories
    #Task 7 Conclusions and Summaries
    #Task 8 Linux Fundamentals Part 3

# Task 1 Introduction
  - In "Linux Fundamentals Part 2," you'll build on what you learned in Part 1. Here's what you'll do:

  - Learn to log into and control remote terminals.
    - Use flags and arguments to improve commands.
    - Copy and move files in the system.
    - Understand file access and permissions.
    - Run your first scripts and executables.
---

# Task 2 Accessing Your Linux Machine Using SSH (Deploy)
# Task 3 Introduction to Flags and Switches
What flag would we use to display the output in a "human-readable" way?
-h
example : ls -lh


# Task 6 Common Directories

  /etc
    - Stores important system files for the operating system.
    - Notable files:
      - sudoers: Lists users/groups with root access.
      - passwd & shadow: Store encrypted user passwords.
    
  /var
    - Stands for "variable data."
    - Contains files frequently accessed or written, such as:
      - Logs: /var/log
      - Database files.
  
  /root
    - Home directory for the system's root user.
    - Separate from /home, where regular user data is stored.
  
  /tmp
   - Temporary directory for storing data that is cleared after a system reboot.
  - Accessible by any user, useful for storing scripts or temporary files.
  
  - Key directories:
    - Logs: /var/log
    - Temporary files: /tmp
    - Root user’s home directory: /root

---


### Linux Findamentals Part3

# Task 1 Introduction
# Task 2 Deploy Your Linux Machine
# Task 3 Terminal Text Editors
# Task 4 General/Useful Utilities
  Downloading Files (Wget):
    Wget is used to download files from the web via HTTP by providing the web address of the resource. 
    Example:
    wget https://example.com/myfile.txt
    
  Transferring Files Between Hosts - SCP (SSH):
    SCP (Secure Copy) allows copying files securely between two computers using SSH for authentication
    and encryption.
    
    To copy a file from your system to a remote system:
      scp important.txt ubuntu@192.168.1.30:/home/ubuntu/transferred.txt
    
    To copy a file from a remote system to your local system:
      scp ubuntu@192.168.1.30:/home/ubuntu/documents.txt notes.txt
    
  
  Serving Files from Your Host - Python HTTPServer:
    You can quickly serve files using Python3's HTTPServer. 
    This creates a simple web server on your computer to share files.
    
    Start the server in the current directory:
    python3 -m http.server
    
    Access the files using a browser or a command like wget:
    wget http://10.10.56.209:8000/myfile
    
  Running the Python3 Web Server in a New Terminal:
    You will need to open a new terminal to run the wget command 
    and leave the terminal with the Python3 web server running.
    Key Commands:

    Start a Web Server:
     python3 -m http.server

    Download a file using wget:
     wget http://10.10.56.209:8000/.flag.txt

    Make sure to stop the Python3 HTTPServer using Ctrl + C once you’re done.
---


# Task 5 Processes 101
  Processes are programs running on your machine, managed by the kernel, 
  each assigned a unique Process ID (PID). 
  The ps command lists running processes for the current user session, 
  while ps aux shows all processes, including system processes.

  Key Commands:
    - ps: Displays a list of running processes.
    - top: Provides real-time system statistics about running processes, refreshing every 10 seconds.
    - kill [PID]: Sends signals to terminate or control processes (e.g., SIGTERM, SIGKILL, SIGSTOP).
  
  Process States:
    - Backgrounding (&): Allows processes to run in the background (e.g., command &).
    - Foregrounding (fg): Brings a backgrounded process back into the foreground.
    - Background Pausing (Ctrl + Z): Pauses a process in the background, which can be resumed.
    - Systemctl for Services: The systemctl command controls services in systemd, allowing you to start, 
      stop, enable, or disable services.

  Systemctl Commands:
    - systemctl start [service]: Starts the service.
    - systemctl stop [service]: Stops the service.
    - systemctl enable [service]: Starts the service on boot.
    - systemctl disable [service]: Prevents a service from starting on boot.
  
  Summary of Key Points:
    - Processes are identified by PIDs and can be controlled using commands like kill.
    - Use systemctl to manage services like starting or stopping a web server.
    - Processes can run in the background using & or paused with Ctrl + Z, and can be resumed using fg.
    
  Sample Questions:
    - What is the next process ID after 300? → 301
    - How do you send a clean kill signal? → SIGTERM
    - How do you bring a backgrounded process back to the foreground? → fg
---


# Task 6: Maintaining Your System - Automation

  - Crontab simplifies task automation, making system maintenance more efficient.

  - Crontab and Cron Jobs:
    - Crontab is a file that manages scheduled tasks on Linux through the cron process.
    - It allows users to automate tasks like backing up files or launching programs at specific times.
    
  - Crontab Format: Each line in a crontab file contains six fields that specify when and what task to execute:

    MIN: Minute of execution.
    HOUR: Hour of execution.
    DOM: Day of the month to execute.
    MON: Month of the year to execute.
    DOW: Day of the week to execute.
    CMD: The actual command to run.
    
    - Example: To back up the "Documents" folder every 12 hours:
    0 */12 * * * cp -R /home/cmnatic/Documents /var/backups/
    
    - Wildcard (*):
    The asterisk is used in fields where a specific value is not required (e.g., any month, day, etc.).
    
    - Editing Crontabs:
    Use crontab -e to edit a crontab file with a text editor.
    
    - Helpful Tools:
    Crontab Generator and Cron Guru are online tools that help generate cron job formatting easily.
---

# Task 7: Maintaining Your System - Package Management

  - Introducing Packages & Software Repositories:
    - Software repositories are places where developers submit their programs for approval and release to the community.
    - Linux stands out for its user accessibility and open-source nature.
    - In Linux, system software is managed via apt repositories.
    - These repositories can be extended by adding additional community repositories using the add-apt-repository command.
    
  - Managing Repositories (Adding and Removing):
    - The apt package manager allows installing, updating, and removing software on Ubuntu.
    - Repositories are automatically checked for updates when the system is updated.

      - For example, to install the Sublime Text editor, you must:
        - Add GPG key: Ensures software integrity (wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -).
        - Add repository: Create a file in /etc/apt/sources.list.d for Sublime Text.
        - Update apt: Run apt update to recognize the new repository.
        - Install software: Run apt install sublime-text.
        
      - Removing repositories and software is as simple as using the add-apt-repository --remove command or manually deleting the repository file and using apt remove.
---



# Task 8:

  - Logs on a Linux system can be found in the /var/log directory. These logs store information about services and applications, helping system administrators monitor health, troubleshoot issues, and investigate activities. Log rotation is used to manage and store them efficiently. Logs of interest include:

    - Apache2 logs for web server activity
    - Fail2Ban logs for monitoring brute force attacks
    - UFW logs for firewall actions
    
    Logs contain valuable information like IP addresses and accessed files, which can help diagnose performance issues or track user activity.
---

# Task 9: Conclusion

Bash
https://tryhackme.com/r/room/bashscripting

Regular expressions
https://tryhackme.com/r/room/catregex

---