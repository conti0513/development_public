### How The Web Works > Putting it all together

  - Index
    - Putting It All Together
    - Other Components
    - How Web Servers Work
    - Quiz

---

# Putting It All Together

  - Summary: Putting It All Together
    When you request a webpage, several things happen in the background:

    - DNS helps your computer find the server's IP address.
    - Your computer communicates with the web server using the HTTP protocol.
    - The web server sends back HTML, JavaScript, CSS, images, and other files.
    - Your browser then formats and displays the website using these resources.
 
 
  - Here are some examples of other components that help the web run more efficiently and provide additional features:

    - CDNs (Content Delivery Networks): These distribute website content across multiple servers worldwide, speeding up access for users by delivering content from a server closer to them.

    - Caching: Web browsers and servers store copies of frequently accessed files to reduce the need for re-downloading the same data, improving website load times.

    - SSL/TLS: These encryption protocols ensure secure communication between the user and the web server, protecting sensitive information like login credentials.

    - Cookies: Small pieces of data stored in your browser to remember information about your visit, such as login status or user preferences.

    - APIs (Application Programming Interfaces): These allow different services to communicate and exchange data, enabling features like weather updates or payment processing on websites.

    - Load Balancer: Distributes incoming traffic across multiple servers to ensure no single server is overwhelmed, enhancing availability and reliability.

    - Database: Stores and manages the data required by a website, such as user accounts, posts, or product information, allowing for dynamic and interactive content.

    - WAF (Web Application Firewall): A security layer that monitors and filters HTTP traffic to protect websites from common attacks like SQL injection and cross-site scripting (XSS).




---



# Other Components
  - Load Balancers:
    Distribute incoming traffic across multiple servers to ensure high availability and handle large volumes of traffic.
    Use algorithms like round-robin or weighted to determine the best server for each request.
    Perform health checks to ensure servers are responsive, routing traffic away from unresponsive servers.
  
  - CDN (Content Delivery Network):
    Hosts static files (e.g., images, CSS, JavaScript) across multiple servers worldwide.
    Routes requests to the nearest physical server, speeding up user access and reducing server load.
    
  - Databases:
    Store and manage information for websites, ranging from simple text files to complex multi-server systems.
    Common databases include MySQL, MongoDB, Postgres, and MSSQL, each offering different features for data storage and retrieval.
    
  - WAF (Web Application Firewall):
    Sits between web requests and the server to protect against hacking attempts and denial-of-service attacks.
    Analyzes requests for malicious behavior, blocks bots, and uses rate limiting to prevent excessive requests from a single IP.
    Drops requests considered potential attacks before they reach the server.
    
  - Key Concepts:
    CDN: Speeds up website access by hosting static files across global servers.
    Health Check: Load balancers use this to ensure servers are responsive.
    WAF: Protects websites from hacking by filtering web requests.
---

# How Web Servers Work

What is a Web Server?:
  - What is a Web Server?
    - A web server is software that listens for incoming connections and delivers web content using the HTTP protocol. Common web servers include Apache, Nginx, IIS, and NodeJS.
    - It delivers files from its root directory, such as /var/www/html on Linux or C:\inetpub\wwwroot on Windows.
  
  - Virtual Hosts:
    - Virtual hosts allow web servers to host multiple websites using different domain names.
    - The server checks the requested hostname and matches it to a virtual host configuration, serving the correct website from the specified root directory.
    - There is no limit to how many websites can be hosted on one server.
    
  - Static vs Dynamic Content:
    - Static content: Content that doesn't change (e.g., images, CSS, JavaScript).
    - Dynamic content: Content that changes based on user input or other factors (e.g., blog updates or search results).
    - Dynamic content is generated in the Backend using scripting languages.
    
  - Scripting and Backend Languages:
    - Backend languages like PHP, Python, Ruby, NodeJS, and others handle the interactive, dynamic aspects of websites.
    - These languages process data, interact with databases, and generate dynamic content based on user input.
    - Backend code is not visible to the client; the client only sees the output (HTML).
  
  - Key Concepts:
    - Virtual Hosts: Used by web servers to host multiple sites.
    - Dynamic Content: Content that changes based on requests.
    - Backend Code: Not visible to the client.
---


# Quiz

process for requesting a website:
    1. Request aaa.com in your browser
    2. Check Local Cache for IP Address
    3. Check your recursive DNS Server for Address
    4. Query root server to find authoritative DNS Server
    5. Authoritative DNS server advises the IP address for the website
    6. Request passes through a Web Application Firewall
    7. Request passes through a Load Balancer
    8. Connect to Web server on Port 80 or 443
    9. Web server receives the GET request
    10. Web Application talks to Database
    11. Your Browser renders the HTML into a viewable website
---
