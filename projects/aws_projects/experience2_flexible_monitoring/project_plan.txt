### 環境構築手順: Flexible Monitoring Environment

---

### DAY 0: 学習と準備

**目標:**
- GitHub ActionsとGitHub Secretsのセキュリティ管理についての理解を深め、実際のプロジェクトでの適用方法を学ぶ。

---

**学習内容:**

#### GitHub Actionsの概要
- **GitHub Actions**は、リポジトリのイベントに基づいて自動化されたワークフローを実行するためのCI/CDツールです。
これにより、コードのビルド、テスト、デプロイが可能です。
- **ワークフロー**は、YAMLファイルで定義され、リポジトリの `.github/workflows` ディレクトリに保存されます。

#### GitHub Secretsの管理
- **GitHub Secrets**は、APIキーやパスワードなどの機密情報を安全にリポジトリに保存し、GitHub Actionsのワークフローで使用するための仕組みです。
- Secretsは暗号化され、ワークフロー内でのみアクセス可能です。これにより、機密情報が誤って公開されるリスクを軽減します。

#### セキュリティ対策
- **機密情報をコードに含めない**: すべての機密情報はGitHub Secretsや環境変数に保存します。
- **ワークフローの設定**: ワークフローのトリガーを信頼できるブランチやタグに制限します。
- **アクセス制御の確認**: リポジトリのアクセス権を定期的に見直し、必要のないユーザーやチームのアクセスを削除します。
- **リポジトリ設定の見直し**: Settings > Manage access でアクセス制御設定を確認し、適切なアクセス権限を設定します。
- **ワークフローのレビュー**: 定期的にワークフローのコードを見直し、不必要なSecretsの使用がないか確認します。
- **セキュリティスキャン**: GitHubのDependabotや他のセキュリティツールを使用して、リポジトリのセキュリティスキャンを実施します。

---

**実践内容:**


@conti0513 ➜ .../development_public/projects/aws_projects/experience2_flexible_monitoring (main) $ tree -a
.

├── README.md
├── autoscaling
├── check_aws_resources.sh
├── cloudwatch
├── ec2
├── project_plan.txt
├── scripts
│   └── deploy.sh
└── terraform

deploy.sh:
/workspaces/development_public/projects/aws_projects/experience2_flexible_monitoring/scripts/deploy.sh

deploy-ec2.yml:
/workspaces/development_public/.github/workflows/experience2_deploy_ec2.yml




@conti0513 ➜ /workspaces/development_public (main) $ ls -la .github/workflows/
total 16
drwxrwxrwx+ 2 root root 4096 Aug 10 17:33 .
drwxrwxrwx+ 3 root root 4096 Jul 29 20:09 ..
-rw-rw-rw-  1 root root  804 Aug 10 15:47 deploy-ec2.yml
-rw-rw-rw-  1 root root  386 Aug 10 17:03 test-workflow-renamed.yml

### 環境構築手順: Flexible Monitoring Environment

---

### DAY 0: 学習と準備

**目標:**
- GitHub ActionsとGitHub Secretsのセキュリティ管理についての理解を深め、実際のプロジェクトでの適用方法を学ぶ。

**学習内容:**
- **GitHub Actions**と**GitHub Secrets**の基本を理解し、セキュリティ対策を実践。
- ワークフローの設計とトリガー条件の設定方法を学習。

**実践内容:**
- ディレクトリ構造の確認と整理。
- ワークフローの配置とテスト。
- SSHキーの管理とEC2インスタンスのデプロイ手順の確認。

---

### DAY 1: 環境の準備と基本設定

**目標:**
- 基本的な開発環境とインフラの準備を行い、プロジェクトの基盤を構築します。

**タスク:**
1. **開発環境のセットアップ**
   - リポジトリのクローンと必要なツールのインストール。

2. **Terraformのインストールと初期設定**
   - Terraformを使用してインフラを管理する準備を整えます。

3. **AWS CLIの設定**
   - AWS CLIを設定し、必要なアクセス権を確保します。

4. **VPCとサブネットの作成**
   - 基本的なネットワーク構成をTerraformで構築します。

---

### DAY 2: インフラの構築

**目標:**
- EC2、セキュリティグループ、ELBの設定を行い、インフラを構築します。

**タスク:**
1. **EC2インスタンスの作成**
   - Terraformを使用してEC2インスタンスを作成し、設定します。

2. **セキュリティグループの設定**
   - 必要なポートの開放とセキュリティグループの設定を行います。

3. **Elastic Load Balancer (ELB) の設定**
   - トラフィックを分散させるためのELBの設定を行います。

4. **Auto Scalingの設定**
   - Auto Scalingグループの作成とスケーリングポリシーの設定。

---

### DAY 3: アプリケーションのデプロイとモニタリングの設定

**目標:**
- アプリケーションのデプロイと、モニタリングおよびログ収集の設定を行います。

**タスク:**
1. **Dockerコンテナの作成とデプロイ**
   - アプリケーションをコンテナ化し、EC2インスタンス上で実行します。

2. **CloudWatch Agentのインストールと設定**
   - メトリクスの収集とモニタリング設定を行います。

3. **CloudWatchアラームの設定**
   - メトリクスのアラーム設定と通知機能の設定を行います。

4. **SNSとSlackの連携**
   - 通知機能を拡張し、監視結果をSlackに通知します。

---

### DAY 4: テストと検証、最終調整

**目標:**
- システムのテストと最終調整を行い、プロジェクトを完了します。

**タスク:**
1. **インフラのテスト**
   - 各コンポーネントが正しく動作することを確認します。

2. **アプリケーションのテスト**
   - アプリケーションが期待通りに動作することを確認します。

3. **モニタリングとアラームのテスト**
   - 監視システムが正しく機能し、通知が適切に行われることを確認します。

4. **最終調整とドキュメントの整備**
   - READMEファイルとドキュメントを整備し、プロジェクトの最終調整を行います。

---

### ファイル名の管理規則

- 各プロジェクトのワークフローを管理しやすくするために、以下の命名規則を採用します。
  - 例: `experience2_deploy_ec2.yml`、`experience2_test_workflow.yml`など。
- プロジェクト名、機能、内容を含めたわかりやすいファイル名を使用します。
