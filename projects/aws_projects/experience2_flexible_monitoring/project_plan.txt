### 環境構築手順: Flexible Monitoring Environment

---

### DAY 1: 学習と準備

**目標:**
- GitHub ActionsとGitHub Secretsのセキュリティ管理についての理解を深め、実際のプロジェクトでの適用方法を学ぶ。

---

**学習内容:**

#### GitHub Actionsの概要
- **GitHub Actions**は、リポジトリのイベントに基づいて自動化されたワークフローを実行するためのCI/CDツールです。
これにより、コードのビルド、テスト、デプロイが可能です。
- **ワークフロー**は、YAMLファイルで定義され、リポジトリの `.github/workflows` ディレクトリに保存されます。

#### GitHub Secretsの管理
- **GitHub Secrets**は、APIキーやパスワードなどの機密情報を安全にリポジトリに保存し、GitHub Actionsのワークフローで使用するための仕組みです。
- Secretsは暗号化され、ワークフロー内でのみアクセス可能です。これにより、機密情報が誤って公開されるリスクを軽減します。

#### セキュリティ対策
- **機密情報をコードに含めない**: すべての機密情報はGitHub Secretsや環境変数に保存します。
- **ワークフローの設定**: ワークフローのトリガーを信頼できるブランチやタグに制限します。
- **アクセス制御の確認**: リポジトリのアクセス権を定期的に見直し、必要のないユーザーやチームのアクセスを削除します。
- **リポジトリ設定の見直し**: Settings > Manage access でアクセス制御設定を確認し、適切なアクセス権限を設定します。
- **ワークフローのレビュー**: 定期的にワークフローのコードを見直し、不必要なSecretsの使用がないか確認します。
- **セキュリティスキャン**: GitHubのDependabotや他のセキュリティツールを使用して、リポジトリのセキュリティスキャンを実施します。

---

### DAY 1: 
- DIRの整理
- git hubのworkflowをリポジトリのルートDIRの.github/workflowに格納
- test git hub workflow
  confirm the trigger of workflow

**実践内容:**


@conti0513 ➜ .../development_public/projects/aws_projects/experience2_flexible_monitoring (main) $ tree -a
.

├── README.md
├── autoscaling
├── check_aws_resources.sh
├── cloudwatch
├── ec2
├── project_plan.txt
├── scripts
│   └── deploy.sh
└── terraform


# Git Hub Actions workflow:
/workspaces/development_public/.github/workflows/experience2_terraform_apply.yml
/workspaces/development_public/.github/workflows/experience2_terraform_limit.yml
/workspaces/development_public/.github/workflows/experience2_test-workflow.yml.bk

# terraform main.tf:
/workspaces/development_public/terraform/main.tf


# check command
# Git Hub Actions workflow:
cat /workspaces/development_public/.github/workflows/experience2_terraform_apply.yml

# terraform main.tf:
cat /workspaces/development_public/terraform/main.tf



The process works as follows:

1. **Workflow YAML (GitHub Actions)**
   - When you push code to your repository, the workflow YAML file (e.g., `experience2_terraform_apply.yml`) is read first by GitHub Actions.
   - The YAML file defines the steps that GitHub Actions will take, such as checking out the code, setting up Terraform, and running `terraform init` and `terraform apply`.

2. **Main.tf (Terraform)**
   - Within the workflow YAML, one of the steps typically involves running Terraform commands (`terraform init`, `terraform apply`).
   - When `terraform apply` is executed, Terraform reads the `main.tf` file and any other `.tf` files in the directory to determine the desired state of your infrastructure and apply the necessary changes.

the workflow YAML file is read first to determine the overall process, 
and then Terraform reads the `main.tf` file as part of executing
the infrastructure deployment steps defined in the workflow.
---


### DAY 3:

- install terraform
 contrast / compare

####  contrast / compare
Sure! Here's a brief comparison between Terraform and AWS CLI:

### Terraform
- **Infrastructure as Code (IaC)**: Terraform allows you to define your entire cloud infrastructure using code, which can be versioned, shared, and reused. It provides a higher-level abstraction of your resources.
- **State Management**: Terraform keeps track of the state of your infrastructure, allowing you to make incremental changes, plan updates, and ensure that your infrastructure matches the desired configuration.
- **Multi-Cloud Support**: Terraform is not limited to AWS; it supports multiple cloud providers (like Azure, GCP, etc.), allowing for a unified approach to managing infrastructure across different platforms.
- **Declarative Syntax**: You describe *what* you want to create, and Terraform figures out *how* to create it. This makes infrastructure provisioning and management more predictable.

### AWS CLI
- **Command-Line Tool**: The AWS CLI is a command-line tool that allows you to interact directly with AWS services. It's ideal for performing individual, on-the-fly tasks or automating simple scripts.
- **Procedural**: AWS CLI uses a procedural approach, where you specify *how* to achieve a task (e.g., creating an EC2 instance). This provides more direct control but requires you to manage dependencies and sequences manually.
- **No State Management**: The AWS CLI does not keep track of the state of your resources. You need to manage resource dependencies and configurations manually.
- **AWS-Specific**: The AWS CLI is specific to AWS services, so it doesn't support multi-cloud environments like Terraform does.

### Summary:
- **Terraform** is ideal for defining and managing complex infrastructure across multiple cloud providers in a consistent, repeatable way.
- **AWS CLI** is more suited for direct, immediate interactions with AWS services, useful for quick tasks or scripts that don't require state management.

We chose Terraform for the following reasons:

1. **Infrastructure as Code (IaC)**: Terraform allows us to define and manage our cloud infrastructure using code. This makes the infrastructure versionable, repeatable, and easier to manage over time.

2. **State Management**: Terraform automatically tracks the state of our resources, ensuring that any changes are applied consistently and predictably, reducing the risk of configuration drift.

3. **Multi-Cloud Support**: Terraform supports multiple cloud providers, which provides flexibility if we need to manage infrastructure across different platforms in the future.

4. **Scalability**: Terraform is well-suited for managing complex, large-scale infrastructure, as it can handle dependencies, orchestration, and modularity efficiently.

5. **Automation**: By using Terraform, we can automate the provisioning and management of resources, reducing manual intervention and minimizing errors.

6. **Community and Ecosystem**: Terraform has a large and active community, with a rich ecosystem of modules and plugins that can help accelerate infrastructure development. 

---



#### Steps to Install Terraform

1. **Navigate to the Root Directory**:
   Make sure you're in the root directory of your repository where you want to install Terraform.

   ```bash
   cd /workspaces/development_public
   ```

2. **Download Terraform**:
   Download the Terraform binary for your operating system.

   ```bash
   wget https://releases.hashicorp.com/terraform/1.5.5/terraform_1.5.5_linux_amd64.zip
   ```

3. **Unzip the Binary**:
   Unzip the downloaded file.

   ```bash
   unzip terraform_1.5.5_linux_amd64.zip
   ```

4. **Move Binary to `/usr/local/bin/`**:
   Move the Terraform binary to `/usr/local/bin/` so it can be executed from anywhere.

   ```bash
   sudo mv terraform /usr/local/bin/
   ```

5. **Verify the Installation**:
   Verify that Terraform has been installed correctly by checking its version.

   ```bash
   terraform -v
   ```

6. **Initialize Terraform**:
   Initialize Terraform in your project. This will download the required provider plugins and set up the backend.

   ```bash
   terraform init
   ```

/workspaces/development_public/
├── terraform/
│   ├── aws_projects/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── outputs.tf
│   └── production/
│       ├── main.tf
│       ├── variables.tf
│       └── outputs.tf
├── README.md
├── TIL/
├── projects/
├── scripts/
└── tutorials/

#### launch EC2

Here's how to proceed:

1. **Create the `terraform` Directory:**
   - At the root of your repository, create a new directory called `terraform`.
   
   ```bash
   mkdir terraform
   cd terraform
   ```

2. **Create the `.tf` File for EC2 in Tokyo:**
   - Inside the `terraform` directory, create a new file named `main.tf`.
   
   ```bash
   touch main.tf
   ```

3. **Edit `main.tf` to Launch EC2 in Tokyo:**

   Open `main.tf` in your preferred editor and add the following configuration:

   ```hcl
   provider "aws" {
     region = "ap-northeast-1" # Tokyo region
   }

   resource "aws_instance" "example" {
     ami           = "ami-0c08c226b5ff7874c" # AMI ID for Amazon Linux 2 in Tokyo
     instance_type = "t2.micro"
     key_name      = var.key_name

     tags = {
       Name = "TerraformExample"
     }
   }

   variable "key_name" {
     description = "The name of the SSH key pair"
     type        = string
   }
   ```

4. **Initialize Terraform:**

   ```bash
   terraform init
   ```

5. **Apply the Configuration:**

   Before applying, make sure your AWS credentials are configured properly.

   ```bash
   terraform apply
   ```

   You'll be prompted to enter the value for the `key_name` variable (e.g., `sawadesign_test01`).

6. **Verify the EC2 Instance:**
   - Once applied, check your AWS console to ensure the EC2 instance is up and running in the Tokyo region.






### DAY *: インフラの構築

**目標:**
- EC2、セキュリティグループ、ELBの設定を行い、インフラを構築します。

**タスク:**
1. **EC2インスタンスの作成**
   - Terraformを使用してEC2インスタンスを作成し、設定します。

2. **セキュリティグループの設定**
   - 必要なポートの開放とセキュリティグループの設定を行います。

3. **Elastic Load Balancer (ELB) の設定**
   - トラフィックを分散させるためのELBの設定を行います。

4. **Auto Scalingの設定**
   - Auto Scalingグループの作成とスケーリングポリシーの設定。

---

### DAY*: アプリケーションのデプロイとモニタリングの設定

**目標:**
- アプリケーションのデプロイと、モニタリングおよびログ収集の設定を行います。

**タスク:**
1. **Dockerコンテナの作成とデプロイ**
   - アプリケーションをコンテナ化し、EC2インスタンス上で実行します。

2. **CloudWatch Agentのインストールと設定**
   - メトリクスの収集とモニタリング設定を行います。

3. **CloudWatchアラームの設定**
   - メトリクスのアラーム設定と通知機能の設定を行います。

4. **SNSとSlackの連携**
   - 通知機能を拡張し、監視結果をSlackに通知します。

---

### DAY *: テストと検証、最終調整

**目標:**
- システムのテストと最終調整を行い、プロジェクトを完了します。

**タスク:**
1. **インフラのテスト**
   - 各コンポーネントが正しく動作することを確認します。

2. **アプリケーションのテスト**
   - アプリケーションが期待通りに動作することを確認します。

3. **モニタリングとアラームのテスト**
   - 監視システムが正しく機能し、通知が適切に行われることを確認します。

4. **最終調整とドキュメントの整備**
   - READMEファイルとドキュメントを整備し、プロジェクトの最終調整を行います。

---

### ファイル名の管理規則

- 各プロジェクトのワークフローを管理しやすくするために、以下の命名規則を採用します。
  - 例: `experience2_deploy_ec2.yml`、`experience2_test_workflow.yml`など。
- プロジェクト名、機能、内容を含めたわかりやすいファイル名を使用します。
